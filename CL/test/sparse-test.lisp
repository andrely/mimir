(in-package :mimir-test)

(def-suite :sparse :in :mimir-all)

(test (m-v-prod :suite :sparse)
  (is (equalp (m-v-prod (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1))))
                        #(1 2 3 4))
              #(2 4))))

(test (m-m-prod :suite :sparse)
  (is (equalp (m-m-prod (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1))))
                        #2A((1 2) (2 3) (3 4) (4 5)))
              #2A((2 3) (4 6)))))

(test (aslice :suite :sparse)
  (is (equalp (slot-value (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) :all :all) 'mimir/sparse::rows)
              (make-array '(2) :initial-contents '(((1 . 1)) ((0 . 1) (2 . 1))))))
  (is (equalp (shape (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) :all :all))
              '(2 4)))
  (is (equalp (slot-value (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) :all #(1 2 3)) 'mimir/sparse::rows)
              (make-array '(2) :initial-contents '(((0 . 1)) ((1 . 1))))))
  (is (equalp (shape (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) :all #(1 2 3)))
              '(2 3)))
  (is (equalp (slot-value (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) #(1) #(1 2 3)) 'mimir/sparse::rows)
              (make-array '(1) :initial-contents '(((1 . 1))))))
  (is (equalp (shape (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) #(1) #(1 2 3)))
              '(1 3)))
  (is (equalp (slot-value (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) #(1) :all) 'mimir/sparse::rows)
              (make-array '(1) :initial-contents '(((0 . 1) (2 . 1))))))
  (is (equalp (shape (aslice (mimir/sparse:make-lil-matrix '(2 4) '(((1 . 1)) ((0 . 1) (2 . 1)))) #(1) :all))
              '(1 4))))
