(in-package :mimir-test)

(def-suite :optimizers :in :mimir-all)

(test (newton :suite :optimizers)
  (let* ((data (mimir/data::mlclass-ex4))
	 (x (add-bias (getf data :x)))
	 (y (getf data :y))
	 (cost #'(lambda (theta) (mimir/logistic::cost x y theta :l 0.0)))
	 (grad #'(lambda (theta) (mimir/logistic::grad x y theta :l 0.0)))
	 (hessian #'(lambda (theta) (mimir/logistic::hessian x theta :l 0.0)))
	 (stats (list :method :newton))
	 (theta (mimir/optimizers:newton cost grad hessian #(0.01d0 0.01d0 0.01d0) :stats stats))
	 (iterations (getf stats :iterations)))
    (is (mimir::array-almost-= theta #(-16.3787 0.1483 0.1589)))
    (is (= (length iterations) 4)))
  (let* ((data (mimir/data::mlclass-ex4))
	 (x (add-bias (getf data :x)))
	 (y (join-col (getf data :y) (a- 1 (getf data :y))))
	 (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 0.0)))
	 (grad #'(lambda (theta) (mimir/maxent::grad x y theta :l 0.0)))
	 (hessian #'(lambda (theta) (mimir/maxent::hessian x theta :l 0.0)))
	 (stats (list :method :newton))
	 (theta (mimir/optimizers:newton cost grad hessian #2A((0.01d0 0.01d0 0.01d0)) :stats stats))
	 (iterations (getf stats :iterations)))
    (is (mimir::array-almost-= theta #2A((-16.3787 0.1483 0.1589))))
    (is (= (length iterations) 4)))
  (let* ((data (iris))
	 (x (add-bias (getf data :x)))
	 (y (binarize (getf data :y)))
	 (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 1.0)))
	 (grad #'(lambda (theta) (mimir/maxent::grad x y theta :l 1.0)))
	 (hessian #'(lambda (theta) (mimir/maxent::hessian x theta :l 1.0)))
	 (stats (list :method :newton))
	 (theta (mimir/optimizers:newton cost grad hessian #2A((0.001d0 0.001d0 0.001d0 0.001d0 0.001d0)
							       (-0.001d0 -0.001d0 -0.001d0 -0.001d0 -0.001d0))
					 :stats stats))
	 (iterations (getf stats :iterations)))
    (is (mimir::array-almost-= theta
			       #2A((17.898793677952817D0 -0.7837392000252522D0 1.242888374876643D0 -3.879039544159735D0 -1.6590203490205193D0)
				   (11.748576317948881D0 0.26054944160198223D0 -0.3358800265778448D0 -1.8331435276744747D0 -2.063617173979995D0))))
    (is (= (length iterations) 6))))

(test (steepest :suite :optimizers)
  (let* ((data (mimir/data::mlclass-ex4))
	 (scaler (train (make-instance 'standard-scaler) (getf data :x) nil))
	 (x (add-bias (predict scaler (getf data :x))))
	 (y (getf data :y))
	 (cost #'(lambda (theta) (mimir/logistic::cost x y theta :l 0.0)))
	 (grad #'(lambda (theta) (mimir/logistic::grad x y theta :l 0.0)))
	 (stats (list :method :steepest))
	 (theta (mimir/optimizers:steepest cost grad #(0.01d0 0.01d0 0.01d0)
					   :stats stats :max-iter 500)))
    (is (mimir::array-almost-= theta #(-0.0254469 1.14114 1.21333) :epsilon 0.1)))
  (let* ((data (mimir/data::mlclass-ex4))
	 (scaler (train (make-instance 'standard-scaler) (getf data :x) nil))
	 (x (add-bias (predict scaler (getf data :x))))
	 (y (join-col (getf data :y) (a- 1 (getf data :y))))
	 (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 0.0)))
	 (grad #'(lambda (theta) (mimir/maxent::grad x y theta :l 0.0)))
	 (stats (list :method :steepest))
	 (theta (mimir/optimizers:steepest cost grad #2A((0.01d0 0.01d0 0.01d0))
					   :stats stats :max-iter 500)))
    (is (mimir::array-almost-= theta #(-0.0254469 1.14114 1.21333) :epsilon 0.1)))
  (let* ((data (iris))
   	 (scaler (train (make-instance 'standard-scaler) (getf data :x) nil))
   	 (x (add-bias (predict scaler (getf data :x))))
   	 (y (binarize (getf data :y)))
   	 (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 1.0)))
   	 (grad #'(lambda (theta) (mimir/maxent::grad x y theta :l 1.0)))
   	 (stats (list :method :steepest))
   	 (theta (mimir/optimizers:steepest cost grad
   					   (reshape (make-array 10
                                                                :initial-contents (loop for i from 0 below 10
                                                                                        collect (* (mimir/stat:normal-deviate) .001d0)))
   						    '(2 5))
   					   :stats stats :max-iter 500 :rho 0.5 :tol 1.0d-5)))
    (is (mimir::array-almost-= theta
     			       #2A((0.0425072 -1.76158 1.40147 -2.77042 -2.63817)
     				   (2.06606 -0.0531037 -0.120857 -1.19605 -2.26611))))))

(test (sign :suite :optimizers)
  (is (mimir::almost-= (mimir/optimizers::sign 0.8 0.4) 0.8))
  (is (mimir::almost-= (mimir/optimizers::sign 0.4 -0.8) -0.4)))

(test (bracket :suite :optimizers)
  (let* ((data (mimir/data::mlclass-ex4))
	 (x (add-bias (getf data :x)))
	 (y (getf data :y))
	 (theta #(0.01d0 0.01d0 0.01d0))
	 (p (a* -1.0 (mimir/logistic::grad x y theta :l 0.0)))
	 (c #'(lambda (alpha)
		(mimir/optimizers::overflow-guard
		 #'(lambda (alpha)
		     (mimir/logistic::cost x y (a+ theta (a* alpha p)) :l 0.0))
		 alpha)))
	 (b (mimir/optimizers::bracket 0.0 1.0 c)))
    (is (mimir::array-almost-= (coerce b 'simple-vector)
			       #(-1.61803 0.0 1.0 880.894 0.778512 651.614)))))

(test (golden-section :suite :optimizers)
  (let* ((data (mimir/data::mlclass-ex4))
	 (x (add-bias (getf data :x)))
	 (y (getf data :y))
	 (theta #(0.01 0.01 0.01))
	 (p (a* -1.0 (mimir/logistic::grad x y theta :l 0.0)))
	 (c #'(lambda (alpha)
		(mimir/optimizers::overflow-guard
		 #'(lambda (alpha)
		     (mimir/logistic::cost x y (a+ theta (a* alpha p)) :l 0.0))
		 alpha)))
	 (b (multiple-value-list (mimir/optimizers::golden-section
				  '(-1.61803 0.0 1.0 880.894 0.778512 651.614) c))))
    (is (mimir::array-almost-= (coerce b 'simple-vector)
			       #(0.000739624 0.685489)))))

(test (line-search :suite :optimizers)
  (let* ((data (mimir/data::mlclass-ex4))
	 (x (add-bias (getf data :x)))
	 (y (getf data :y))
	 (theta #(0.01 0.01 0.01))
	 (p (a* -1.0 (mimir/logistic::grad x y theta :l 0.0)))
	 (c #'(lambda (alpha)
		(mimir/logistic::cost x y (a+ theta (a* alpha p)) :l 0.0)))
	 (b (multiple-value-list (mimir/optimizers:line-search 0.0 1.0 c))))
    (is (mimir::array-almost-= (coerce b 'simple-vector)
			       #(0.000739624 0.685489)))))

(test (cgd-fr :suite :optimizers)
  (let* ((data (iris))
         (scaler (train (make-instance 'standard-scaler) (getf data :x) nil))
         (x (add-bias (predict scaler (getf data :x))))
         (y (binarize (getf data :y)))
         (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 1.0)))
         (grad #'(lambda (theta) (mimir/maxent::grad x y theta :l 1.0)))
         (stats (list :method :cgd-fr))
         (theta (mimir/optimizers:cgd-fr cost grad
                                         (reshape (make-array 10
                                                              :initial-contents (loop for i from 0 below 10
                                                                                      collect (* (mimir/stat:normal-deviate) .001d0)))
                                                  '(2 5))
                                         :stats stats :max-iter 50)))
    (is (mimir::array-almost-= theta #2A((0.5157 -1.6937 1.5391 -2.9251 -2.7841)
                                         (2.3700 -0.0502 -0.0128 -1.4165 -2.3897))))))

(test (sgd :suite :optimizers)
  (let* ((cl-variates:*random-generator*
          (make-instance 'cl-variates:ranq1-random-number-generator :random-seed 1))
         (data (iris))
         (scaler (train (make-instance 'standard-scaler) (getf data :x) nil))
         (x (add-bias (predict scaler (getf data :x))))
         (y (binarize (getf data :y)))
         (cost #'(lambda (theta) (mimir/maxent::cost x y theta :l 1.0)))
         (grad #'(lambda (theta batch) (mimir/maxent::grad (first batch) (second batch) theta :l 1.0)))
         (b (mimir/optimizers:mini-batch x y :batch-size 50))
         (stats (list :method :sgd))
         (theta (mimir/optimizers:sgd cost grad b
                                      (reshape (make-array 10
                                                           :initial-contents (loop for i from 0 below 10
                                                                                   collect (cl-variates:normal-random cl-variates:*random-generator* 0.0 .001d0)))
                                               '(2 5))
                                      :rho 0.5 :stats stats :max-iter 100)))
    (is (mimir::array-almost-= theta #2A((-0.2860337599775356D0 -1.2088731087608276D0 0.8917127858365435D0 -1.7717684702833095D0 -1.6772588358465286D0)
                                         (1.0107912762499718D0 -0.16284390086180803D0 -0.4241438179991228D0 -0.5905806790334606D0 -1.2984798630561754D0))))))