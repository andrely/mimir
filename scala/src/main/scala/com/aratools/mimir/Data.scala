package com.aratools.mimir

import breeze.linalg.{DenseMatrix, DenseVector, argmax}
import breeze.numerics.pow

import scala.collection.immutable.IndexedSeq

object Data {
  def makePoly(x: DenseMatrix[Double], n: Int = 6): DenseMatrix[Double] = {
    val N = x.rows
    val P = (n * (n + 1) / 2) + n + 1
    val result = DenseMatrix.zeros[Double](N, P)

    for (k <- 0 until N) {
      var idx = 0

      for (i <- 0 to n) {
        for (j <- 0 to n) {
          if (i + j <= n) {
            result(k, idx) = pow(x(k, 0), i) * pow(x(k, 1), j)
            idx += 1
          }
        }
      }
    }

    result
  }

  def addBias(x: DenseMatrix[Double]): DenseMatrix[Double] = {
    val result = DenseMatrix.zeros[Double](x.rows, x.cols + 1) :+ 1.0
    result(::, 1 until x.cols + 1) := x

    result
  }

  def binarize(x: DenseVector[String]): DenseMatrix[Double] = {
    val classes = x.toArray.distinct
    val result = DenseMatrix.zeros[Double](x.length, classes.length)

    for (i <- 0 until x.length) {
      result(i, classes.indexOf(x(i))) = 1.0d
    }

    result
  }

  def factorize(X: DenseMatrix[Double]): DenseVector[Double] = {
    val values: IndexedSeq[Double] = for {
      i <- 0 until X.rows
      row = X(i, ::)
    } yield {
      argmax(row).toDouble
    }

    DenseVector(values:_*)
  }

  def mlclassEx4() = {
    (DenseMatrix(
      (55.5d, 69.5d), (41.0d, 81.5d), (53.5d, 86.0d), (46.0d, 84.0d), (41.0d, 73.5d),
      (51.5d, 69.0d), (51.0d, 62.5d), (42.0d, 75.0d), (53.5d, 83.0d), (57.5d, 71.0d),
      (42.5d, 72.5d), (41.0d, 80.0d), (46.0d, 82.0d), (46.0d, 60.5d), (49.5d, 76.0d),
      (41.0d, 76.0d), (48.5d, 72.5d), (51.5d, 82.5d), (44.5d, 70.5d), (44.0d, 66.0d),
      (33.0d, 76.5d), (33.5d, 78.5d), (31.5d, 72.0d), (33.0d, 81.5d), (42.0d, 59.5d),
      (30.0d, 64.0d), (61.0d, 45.0d), (49.0d, 79.0d), (26.5d, 64.5d), (34.0d, 71.5d),
      (42.0d, 83.5d), (29.5d, 74.5d), (39.5d, 70.0d), (51.5d, 66.0d), (41.5d, 71.5d),
      (42.5d, 79.5d), (35.0d, 59.5d), (38.5d, 73.5d), (32.0d, 81.5d), (46.0d, 60.5d),
      (36.5d, 53.0d), (36.5d, 53.5d), (24.0d, 60.5d), (19.0d, 57.5d), (34.5d, 60.0d),
      (37.5d, 64.5d), (35.5d, 51.0d), (37.0d, 50.5d), (21.5d, 42.0d), (35.5d, 58.5d),
      (26.5d, 68.5d), (26.5d, 55.5d), (18.5d, 67.0d), (40.0d, 67.0d), (32.5d, 71.5d),
      (39.0d, 71.5d), (43.0d, 55.5d), (22.0d, 54.0d), (36.0d, 62.5d), (31.0d, 55.5d),
      (38.5d, 76.0d), (40.0d, 75.0d), (37.5d, 63.0d), (24.5d, 58.0d), (30.0d, 67.0d),
      (33.0d, 56.0d), (56.5d, 61.0d), (41.0d, 57.0d), (49.5d, 63.0d), (34.5d, 72.5d),
      (32.5d, 69.0d), (36.0d, 73.0d), (27.0d, 53.5d), (41.0d, 63.5d), (29.5d, 52.5d),
      (20.0d, 65.5d), (38.0d, 65.0d), (18.5d, 74.5d), (16.0d, 72.5d), (33.5d, 68.0d)),
      DenseVector(
        1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d,
        1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d,
        0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d,
        0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d))
  }

  def mlclassEx5() = {
    (DenseMatrix(
      (0.051267d, 0.69956d), (-0.092742d, 0.68494d), (-0.21371d, 0.69225d), (-0.375d, 0.50219d),
      (-0.51325d, 0.46564d), (-0.52477d, 0.2098d), (-0.39804d, 0.034357d), (-0.30588d, -0.19225d),
      (0.016705d, -0.40424d), (0.13191d, -0.51389d), (0.38537d, -0.56506d), (0.52938d, -0.5212d),
      (0.63882d, -0.24342d), (0.73675d, -0.18494d), (0.54666d, 0.48757d), (0.322d, 0.5826d),
      (0.16647d, 0.53874d), (-0.046659d, 0.81652d), (-0.17339d, 0.69956d), (-0.47869d, 0.63377d),
      (-0.60541d, 0.59722d), (-0.62846d, 0.33406), (-0.59389, 0.005117), (-0.42108, -0.27266), (-0.11578, -0.39693),
      (0.20104d, -0.60161d), (0.46601d, -0.53582), (0.67339, -0.53582), (-0.13882, 0.54605), (-0.29435, 0.77997),
      (-0.26555d, 0.96272d), (-0.16187d, 0.8019), (-0.17339, 0.64839), (-0.28283, 0.47295), (-0.36348, 0.31213),
      (-0.30012d, 0.027047d), (-0.23675d, -0.21418), (-0.06394, -0.18494), (0.062788, -0.16301), (0.22984, -0.41155),
      (0.2932d, -0.2288d), (0.48329d, -0.18494), (0.64459, -0.14108), (0.46025, 0.012427), (0.6273, 0.15863),
      (0.57546d, 0.26827d), (0.72523d, 0.44371), (0.22408, 0.52412), (0.44297, 0.67032), (0.322, 0.69225),
      (0.13767d, 0.57529d), (-0.0063364, 0.39985), (-0.092742, 0.55336), (-0.20795, 0.35599), (-0.20795, 0.17325),
      (-0.43836d, 0.21711d), (-0.21947d, -0.016813), (-0.13882, -0.27266), (0.18376, 0.93348), (0.22408, 0.77997),
      (0.29896d, 0.61915d), (0.50634d, 0.75804), (0.61578, 0.7288), (0.60426, 0.59722), (0.76555, 0.50219),
      (0.92684d, 0.3633d), (0.82316d, 0.27558), (0.96141, 0.085526), (0.93836, 0.012427), (0.86348, -0.082602),
      (0.89804d, -0.20687d), (0.85196d, -0.36769), (0.82892, -0.5212), (0.79435, -0.55775), (0.59274, -0.7405),
      (0.51786d, -0.5943d), (0.46601d, -0.41886), (0.35081, -0.57968), (0.28744, -0.76974), (0.085829, -0.75512),
      (0.14919d, -0.57968d), (-0.13306d, -0.4481), (-0.40956, -0.41155), (-0.39228, -0.25804), (-0.74366, -0.25804),
      (-0.69758d, 0.041667d), (-0.75518d, 0.2902), (-0.69758, 0.68494), (-0.4038, 0.70687), (-0.38076, 0.91886),
      (-0.50749d, 0.90424d), (-0.54781d, 0.70687), (0.10311, 0.77997), (0.057028, 0.91886), (-0.10426, 0.99196),
      (-0.081221d, 1.1089d), (0.28744d, 1.087d), (0.39689, 0.82383), (0.63882, 0.88962), (0.82316, 0.66301),
      (0.67339d, 0.64108d), (1.0709d, 0.10015d), (-0.046659, -0.57968), (-0.23675, -0.63816), (-0.15035, -0.36769),
      (-0.49021d, -0.3019d), (-0.46717d, -0.13377d), (-0.28859, -0.060673), (-0.61118, -0.067982), (-0.66302, -0.21418),
      (-0.59965d, -0.41886d), (-0.72638d, -0.082602d), (-0.83007, 0.31213), (-0.72062, 0.53874), (-0.59389, 0.49488),
      (-0.48445d, 0.99927d), (-0.0063364d, 0.99927d)),
      DenseVector(1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d,
        1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d,
        1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d,
        1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 1.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d,
        0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d,
        0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d,
        0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d, 0.0d))
  }

  def iris() = {
    (DenseMatrix((5.1d, 3.5d, 1.4d, 0.2d), (4.9d, 3.0d, 1.4d, 0.2d), (4.7d, 3.2d, 1.3d, 0.2d), (4.6d, 3.1d, 1.5d, 0.2d), (5.0d, 3.6d, 1.4d, 0.2d),
      (5.4d, 3.9d, 1.7d, 0.4d), (4.6d, 3.4d, 1.4d, 0.3d), (5.0d, 3.4d, 1.5d, 0.2d), (4.4d, 2.9d, 1.4d, 0.2d), (4.9d, 3.1d, 1.5d, 0.1d),
      (5.4d, 3.7d, 1.5d, 0.2d), (4.8d, 3.4d, 1.6d, 0.2d), (4.8d, 3.0d, 1.4d, 0.1d), (4.3d, 3.0d, 1.1d, 0.1d), (5.8d, 4.0d, 1.2d, 0.2d),
      (5.7d, 4.4d, 1.5d, 0.4d), (5.4d, 3.9d, 1.3d, 0.4d), (5.1d, 3.5d, 1.4d, 0.3d), (5.7d, 3.8d, 1.7d, 0.3d), (5.1d, 3.8d, 1.5d, 0.3d),
      (5.4d, 3.4d, 1.7d, 0.2d), (5.1d, 3.7d, 1.5d, 0.4d), (4.6d, 3.6d, 1.0d, 0.2d), (5.1d, 3.3d, 1.7d, 0.5d), (4.8d, 3.4d, 1.9d, 0.2d),
      (5.0d, 3.0d, 1.6d, 0.2d), (5.0d, 3.4d, 1.6d, 0.4d), (5.2d, 3.5d, 1.5d, 0.2d), (5.2d, 3.4d, 1.4d, 0.2d), (4.7d, 3.2d, 1.6d, 0.2d),
      (4.8d, 3.1d, 1.6d, 0.2d), (5.4d, 3.4d, 1.5d, 0.4d), (5.2d, 4.1d, 1.5d, 0.1d), (5.5d, 4.2d, 1.4d, 0.2d), (4.9d, 3.1d, 1.5d, 0.2d),
      (5.0d, 3.2d, 1.2d, 0.2d), (5.5d, 3.5d, 1.3d, 0.2d), (4.9d, 3.6d, 1.4d, 0.1d), (4.4d, 3.0d, 1.3d, 0.2d), (5.1d, 3.4d, 1.5d, 0.2d),
      (5.0d, 3.5d, 1.3d, 0.3d), (4.5d, 2.3d, 1.3d, 0.3d), (4.4d, 3.2d, 1.3d, 0.2d), (5.0d, 3.5d, 1.6d, 0.6d), (5.1d, 3.8d, 1.9d, 0.4d),
      (4.8d, 3.0d, 1.4d, 0.3d), (5.1d, 3.8d, 1.6d, 0.2d), (4.6d, 3.2d, 1.4d, 0.2d), (5.3d, 3.7d, 1.5d, 0.2d), (5.0d, 3.3d, 1.4d, 0.2d),
      (7.0d, 3.2d, 4.7d, 1.4d), (6.4d, 3.2d, 4.5d, 1.5d), (6.9d, 3.1d, 4.9d, 1.5d), (5.5d, 2.3d, 4.0d, 1.3d), (6.5d, 2.8d, 4.6d, 1.5d),
      (5.7d, 2.8d, 4.5d, 1.3d), (6.3d, 3.3d, 4.7d, 1.6d), (4.9d, 2.4d, 3.3d, 1.0d), (6.6d, 2.9d, 4.6d, 1.3d), (5.2d, 2.7d, 3.9d, 1.4d),
      (5.0d, 2.0d, 3.5d, 1.0d), (5.9d, 3.0d, 4.2d, 1.5d), (6.0d, 2.2d, 4.0d, 1.0d), (6.1d, 2.9d, 4.7d, 1.4d), (5.6d, 2.9d, 3.6d, 1.3d),
      (6.7d, 3.1d, 4.4d, 1.4d), (5.6d, 3.0d, 4.5d, 1.5d), (5.8d, 2.7d, 4.1d, 1.0d), (6.2d, 2.2d, 4.5d, 1.5d), (5.6d, 2.5d, 3.9d, 1.1d),
      (5.9d, 3.2d, 4.8d, 1.8d), (6.1d, 2.8d, 4.0d, 1.3d), (6.3d, 2.5d, 4.9d, 1.5d), (6.1d, 2.8d, 4.7d, 1.2d), (6.4d, 2.9d, 4.3d, 1.3d),
      (6.6d, 3.0d, 4.4d, 1.4d), (6.8d, 2.8d, 4.8d, 1.4d), (6.7d, 3.0d, 5.0d, 1.7d), (6.0d, 2.9d, 4.5d, 1.5d), (5.7d, 2.6d, 3.5d, 1.0d),
      (5.5d, 2.4d, 3.8d, 1.1d), (5.5d, 2.4d, 3.7d, 1.0d), (5.8d, 2.7d, 3.9d, 1.2d), (6.0d, 2.7d, 5.1d, 1.6d), (5.4d, 3.0d, 4.5d, 1.5d),
      (6.0d, 3.4d, 4.5d, 1.6d), (6.7d, 3.1d, 4.7d, 1.5d), (6.3d, 2.3d, 4.4d, 1.3d), (5.6d, 3.0d, 4.1d, 1.3d), (5.5d, 2.5d, 4.0d, 1.3d),
      (5.5d, 2.6d, 4.4d, 1.2d), (6.1d, 3.0d, 4.6d, 1.4d), (5.8d, 2.6d, 4.0d, 1.2d), (5.0d, 2.3d, 3.3d, 1.0d), (5.6d, 2.7d, 4.2d, 1.3d),
      (5.7d, 3.0d, 4.2d, 1.2d), (5.7d, 2.9d, 4.2d, 1.3d), (6.2d, 2.9d, 4.3d, 1.3d), (5.1d, 2.5d, 3.0d, 1.1d), (5.7d, 2.8d, 4.1d, 1.3d),
      (6.3d, 3.3d, 6.0d, 2.5d), (5.8d, 2.7d, 5.1d, 1.9d), (7.1d, 3.0d, 5.9d, 2.1d), (6.3d, 2.9d, 5.6d, 1.8d), (6.5d, 3.0d, 5.8d, 2.2d),
      (7.6d, 3.0d, 6.6d, 2.1d), (4.9d, 2.5d, 4.5d, 1.7d), (7.3d, 2.9d, 6.3d, 1.8d), (6.7d, 2.5d, 5.8d, 1.8d), (7.2d, 3.6d, 6.1d, 2.5d),
      (6.5d, 3.2d, 5.1d, 2.0d), (6.4d, 2.7d, 5.3d, 1.9d), (6.8d, 3.0d, 5.5d, 2.1d), (5.7d, 2.5d, 5.0d, 2.0d), (5.8d, 2.8d, 5.1d, 2.4d),
      (6.4d, 3.2d, 5.3d, 2.3d), (6.5d, 3.0d, 5.5d, 1.8d), (7.7d, 3.8d, 6.7d, 2.2d), (7.7d, 2.6d, 6.9d, 2.3d), (6.0d, 2.2d, 5.0d, 1.5d),
      (6.9d, 3.2d, 5.7d, 2.3d), (5.6d, 2.8d, 4.9d, 2.0d), (7.7d, 2.8d, 6.7d, 2.0d), (6.3d, 2.7d, 4.9d, 1.8d), (6.7d, 3.3d, 5.7d, 2.1d),
      (7.2d, 3.2d, 6.0d, 1.8d), (6.2d, 2.8d, 4.8d, 1.8d), (6.1d, 3.0d, 4.9d, 1.8d), (6.4d, 2.8d, 5.6d, 2.1d), (7.2d, 3.0d, 5.8d, 1.6d),
      (7.4d, 2.8d, 6.1d, 1.9d), (7.9d, 3.8d, 6.4d, 2.0d), (6.4d, 2.8d, 5.6d, 2.2d), (6.3d, 2.8d, 5.1d, 1.5d), (6.1d, 2.6d, 5.6d, 1.4d),
      (7.7d, 3.0d, 6.1d, 2.3d), (6.3d, 3.4d, 5.6d, 2.4d), (6.4d, 3.1d, 5.5d, 1.8d), (6.0d, 3.0d, 4.8d, 1.8d), (6.9d, 3.1d, 5.4d, 2.1d),
      (6.7d, 3.1d, 5.6d, 2.4d), (6.9d, 3.1d, 5.1d, 2.3d), (5.8d, 2.7d, 5.1d, 1.9d), (6.8d, 3.2d, 5.9d, 2.3d), (6.7d, 3.3d, 5.7d, 2.5d),
      (6.7d, 3.0d, 5.2d, 2.3d), (6.3d, 2.5d, 5.0d, 1.9d), (6.5d, 3.0d, 5.2d, 2.0d), (6.2d, 3.4d, 5.4d, 2.3d), (5.9d, 3.0d, 5.1d, 1.8d)),
      DenseVector("setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "setosa", "setosa", "setosa", "setosa", "setosa", "setosa",
        "setosa", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "versicolor", "versicolor", "versicolor", "versicolor",
        "versicolor", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica", "virginica", "virginica", "virginica", "virginica",
        "virginica"))
  }
}
